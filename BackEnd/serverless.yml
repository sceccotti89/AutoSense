service:
  name: 'backend'

frameworkVersion: '>=1.72.0'

plugins:
  - 'serverless-webpack'
  - 'serverless-s3-local'
  - 'serverless-add-api-key'
  - 'serverless-offline'

custom:
  webpack:
    webpackConfig: './webpack.config.js'
    includeModules: true
  apiKeys:
    - name: 'auto-sense-${opt:stage, self:provider.stage, "dev"}'
      value: '${opt:api_key}'
  s3:
    port: 8000
    host: localhost
    directory: /tmp
    cors: false

provider:
  stage: dev
  name: 'aws'
  runtime: 'nodejs12.x'
  apiGateway:
    minimumCompressionSize: 1024
  apiName: 'auto-sense-${opt:stage, self:provider.stage, "dev"}'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    FLEET_TABLE: 'fleet-${opt:stage, self:provider.stage, "dev"}'
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:DeleteItem"
      Resource: 'arn:aws:dynamodb:eu-central-1:*:table/fleet-${opt:stage, self:provider.stage, "dev"}'
functions:
  getFleet:
    handler: 'lambdas/src/getFleet.handler'
    name: 'getFleet-${opt:stage, self:provider.stage, "dev"}'
    events:
      - http:
          method: 'get'
          path: 'get-all-fleet'
          cors: true
          private: true
  getCarFromFleet:
    handler: 'lambdas/src/getCarFromFleet.handler'
    name: 'getCarFromFleet-${opt:stage, self:provider.stage, "dev"}'
    events:
      - http:
          method: 'get'
          path: 'get-car-fleet/{carId}'
          cors: true
          private: true
  addCarToFleet:
    handler: 'lambdas/src/addCarToFleet.handler'
    name: 'addCarToFleet-${opt:stage, self:provider.stage, "dev"}'
    events:
      - http:
          method: 'post'
          path: 'add-car-fleet'
          cors: true
          private: true
  deleteCarFromFleet:
    handler: 'lambdas/src/deleteCarFromFleet.handler'
    name: 'deleteCarFromFleet-${opt:stage, self:provider.stage, "dev"}'
    events:
      - http:
          method: 'delete'
          path: 'delete-car-fleet/{carId}'
          cors: true
          private: true
  s3hook:
    handler: lambdas/src/s3Test.s3hook
    events:
      - s3:
          bucket: local-bucket
          event: s3:*
  s3test:
    handler: 'lambdas/src/s3Test.handler'
    name: 's3test'
    events:
      - http:
          method: 'get'
          path: 's3'

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: local-bucket
# resources:
  # - ${file(aws-serverless/api-gateway-errors.yml)}
  # - ${file(aws-serverless/dynamo-db-tables.yml)}
