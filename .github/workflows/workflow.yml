name: CI

on:
  push:
    branches: [ master, develop, 'feature/*' ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 12.18.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.18.2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      - name: Install Front-End dependencies
        run: npm install
        working-directory: ./FrontEnd
      - name: Unit Test Front-End
        run: npm test -- --no-watch --code-coverage --no-progress --browsers=ChromeHeadlessCI
        working-directory: ./FrontEnd
      - name: e2e Test Front-End
        run: npm run e2e:ci
        working-directory: ./FrontEnd
      
      - name: Install Back-End dependencies
        run: npm install
        working-directory: ./BackEnd
      - name: Test Back-End
        run: npm test
        working-directory: ./BackEnd

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: contains(github.ref, 'master') || contains(github.ref, 'develop')
    steps:
      - run: echo "::set-env name=STAGE::$(if [ ${{ github.ref }} == 'refs/heads/master' ]; then echo 'prod'; else echo 'dev'; fi)"
      - run: echo "::set-env name=AWS_API_KEY::$(if [ ${{ github.ref }} == 'refs/heads/master' ]; then echo ${{ secrets.AWS_API_KEY_PROD }}; else echo ${{ secrets.AWS_API_KEY_DEV }}; fi)"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - uses: actions/checkout@v2
      - name: Use Node.js 12.18.2
        uses: actions/setup-node@v1
        with:
          node-version: 12.18.2

      - name: Replace API KEYs
        run: |	
          sed -i 's/#{{AWS_API_KEY}}/${{ secrets.AWS_API_KEY_PROD }}/g' src/environments/environment.prod.ts
          sed -i 's/#{{GOOGLE_API_KEY}}/${{ secrets.GOOGLE_API_KEY_PROD }}/g' src/environments/environment.prod.ts	
        if: github.ref == 'refs/heads/master'
        working-directory: ./FrontEnd
      
      - name: Deploy Front-End with AWS Amplify
        run: |
          npm install -g aws-cli
          aws configure set aws_access_key_id ${{ secrets.AWS_AMPLIFY_ACCESS_KEY }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_AMPLIFY_SECRET_ACCESS_KEY }}
          aws configure set default.region eu-central-1
          npm install
          npm install -g @aws-amplify/cli@latest
          amplify pull --accessKeyId ${{ secrets.AWS_AMPLIFY_ACCESS_KEY }} --secretAccessKey ${{ secrets.AWS_AMPLIFY_SECRET_ACCESS_KEY }} --region eu-central-1 --envName ${{ env.STAGE }} --appId d2rul15yln0vt3 --yes
          cp 'amplify-configs/project-config.${{ env.STAGE }}.json' amplify/.config/project-config.json
          amplify publish
        working-directory: ./FrontEnd

      - name: Install serveless dependencies
        run: npm install
        working-directory: ./BackEnd
      - name: Deploy serverless
        uses: aaronpanch/action-serverless@master
        with:
          args: deploy --stage ${{ env.STAGE }} --region eu-central-1 --conceal --api_key ${{ env.AWS_API_KEY }}
        env:
          SERVICE_ROOT: './BackEnd'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_SERVERLESS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SERVERLESS_SECRET_ACCESS_KEY }}
